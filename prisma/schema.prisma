// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id                   String            @id @map("_id")
  email                String            @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  newsletterSubscribed Boolean           @default(false)
  favoriteStadiums     FavoriteStadium[]
  favoriteTeams        FavoriteTeam[]
  ratings              Rating[]
}

model Team {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  imageUrl     String?
  league       String
  country      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hostMatches  Match[]        @relation("MatchHost")
  guestMatches Match[]        @relation("MatchGuest")
  favoriteTeam FavoriteTeam[]

  stadium Stadium?
}

model Stadium {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl    String?
  websiteUrl  String?
  name        String
  latitude    Float
  longitude   Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ratings     Rating[]

  teamId          String            @unique @db.ObjectId
  team            Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  FavoriteStadium FavoriteStadium[]
}

model Match {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  host    Team     @relation("MatchHost", fields: [hostId], references: [id], onDelete: Cascade)
  hostId  String   @db.ObjectId
  guest   Team     @relation("MatchGuest", fields: [guestId], references: [id], onDelete: Cascade)
  guestId String   @db.ObjectId
  date    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  stadium   Stadium @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
  stadiumId String  @db.ObjectId
  rating    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteStadium {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  stadium   Stadium @relation(fields: [stadiumId], references: [id], onDelete: Cascade)
  stadiumId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteTeam {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
